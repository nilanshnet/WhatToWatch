{"remainingRequest":"/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/src/views/SocialPage.vue?vue&type=template&id=f99b1954&scoped=true&","dependencies":[{"path":"/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/src/views/SocialPage.vue","mtime":1620867594374},{"path":"/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nilanshnetan/Desktop/NYU-Spring21/Cloud/FinalProject/final-project-cloud-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}