{"remainingRequest":"/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/src/components/Titles.vue?vue&type=template&id=f9526c6a&scoped=true&","dependencies":[{"path":"/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/src/components/Titles.vue","mtime":1621637396366},{"path":"/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nilanshnetan/Desktop/GitHub/WhatToWatch/Frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}